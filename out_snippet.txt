        "\n",
        "def extrae_texto_json_entre(\n",
        "    file_json: str | Path,\n",
        "    inicio: str = '\"items\":[',\n",
        "    fin: str = '],\"totalPages\"',\n",
        ") -> str:\n",
        "    \"\"\"Extrae el texto entre dos marcadores dentro de un archivo JSON.\n",
        "\n",
        "    Lee el archivo como texto y devuelve el substring comprendido entre la\n",
        "    primera ocurrencia de `inicio` y la siguiente ocurrencia de `fin`.\n",
        "\n",
        "    Por compatibilidad, intenta variantes con comillas escapadas (\\\\\") si\n",
        "    no encuentra coincidencia exacta.\n",
        "\n",
        "    Args:\n",
        "        file_json: Ruta al archivo `.json` a leer.\n",
        "        inicio: Marcador inicial. Por defecto busca '\"items\":['.\n",
        "        fin: Marcador final. Por defecto busca '],\"totalPages\"'.\n",
        "\n",
        "    Returns:\n",
        "        El texto encontrado entre `inicio` y `fin`. Si no se encuentran\n",
        "        los marcadores en ninguna variante, devuelve cadena vacía.\n",
        "    \"\"\"\n",
        "    ruta = Path(file_json)\n",
        "    if not ruta.exists() or not ruta.is_file():\n",
        "        raise FileNotFoundError(f\"No existe el archivo: {ruta}\")\n",
        "\n",
        "    contenido = ruta.read_text(encoding=\"utf-8\", errors=\"ignore\")\n",
        "\n",
        "    inicio_real: str | None = None\n",
        "    for variante in _marker_variants(inicio):\n",
        "        idx = contenido.find(variante)\n",
        "        if idx != -1:\n",
        "            inicio_real = variante\n",
        "            inicio_idx = idx + len(variante)\n",
        "            break\n",
        "\n",
        "    if inicio_real is None:\n",
        "        return \"\"\n",
        "\n",
        "    fin_real: str | None = None\n",
        "    for variante in _marker_variants(fin):\n",
        "        fin_idx = contenido.find(variante, inicio_idx)\n",
        "        if fin_idx != -1:\n",
        "            fin_real = variante\n",
        "            break\n",
        "\n",
        "    if fin_real is None:\n",
        "        return \"\"\n",
        "\n",
        "    return contenido[inicio_idx:fin_idx]\n",
        "\n",
        "\n",
        "def main() -> None:\n",
        "    \"\"\"Ejecución ad-hoc: carga JSON por rutas y extrae `items`.\"\"\"\n",
        "    try:\n",
        "        archivos = listar_archivos_json(\"data/raw\", recursivo=False)\n",
        "    except FileNotFoundError as e:\n",
        "        print(e)\n",
        "        return\n",
        "\n",
        "    print(f\"Encontrados {len(archivos)} archivo(s) .json en data/raw\")\n",
        "    contenidos = cargar_todos_los_json(archivos, estricto=False)\n",
        "    print(f\"Cargados {len(contenidos)} archivo(s) JSON\")\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "mimetype": "text/x-python",
      "file_extension": ".py"
    }
